name: Quarkus CI

on:
  push:
    branches-ignore:
      - 'dependabot/**'
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - 'docs/src/main/asciidoc/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '.github/*.java'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - 'docs/src/main/asciidoc/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '.github/*.java'

env:
  # Workaround testsuite locale issue
  LANG: en_US.UTF-8
  NATIVE_TEST_MAVEN_OPTS: "-B --settings .github/mvn-settings.xml --fail-at-end -Dquarkus.native.container-build=true -Dtest-postgresql -Dtest-elasticsearch -Delasticsearch.hosts='localhost:9200' -Dtest-keycloak -Dtest-amazon-services -Dtest-db2 -Dtest-mysql -Dtest-mariadb -Dmariadb.base_url='jdbc:mariadb://localhost:3308' -Dmariadb.url='jdbc:mariadb://localhost:3308/hibernate_orm_test'  -Dtest-mssql -Dtest-vault -Dtest-neo4j -Dtest-kafka -Dtest-redis -Dnative-image.xmx=5g -Dnative -Dnative.surefire.skip -Dformat.skip -Dno-descriptor-tests install -DskipDocs"
  JVM_TEST_MAVEN_OPTS: "-e -B --settings .github/mvn-settings.xml -Dtest-postgresql -Dtest-elasticsearch -Delasticsearch.hosts='localhost:9200' -Dtest-db2 -Dtest-mysql -Dtest-mariadb -Dmariadb.base_url='jdbc:mariadb://localhost:3308' -Dmariadb.url='jdbc:mariadb://localhost:3308/hibernate_orm_test'  -Dtest-mssql -Dtest-amazon-services -Dtest-vault -Dtest-neo4j -Dtest-kafka -Dtest-keycloak -Dtest-redis -Dformat.skip -DskipDocs"
  DB_USER: hibernate_orm_test
  DB_PASSWORD: hibernate_orm_test
  DB_NAME: hibernate_orm_test
jobs:
  ci-sanity-check:
    name: "CI Sanity Check"
    runs-on: ubuntu-latest
    steps:
      - name: Build
        run: sleep 30
  build-jdk11:
    name: "JDK 11 Build"
    runs-on: ubuntu-latest
    # Skip draft PRs and those with WIP in the subject, rerun as soon as its removed
    if: "github.event_name != 'pull_request' || ( \
           github.event.pull_request.draft == false && \
           github.event.pull_request.state != 'closed' && \
           contains(github.event.pull_request.title, 'wip ') == false && \
           contains(github.event.pull_request.title, '[wip]') == false && \
           (
             github.event.action != 'edited' || \
             contains(github.event.changes.title.from, 'wip ') || \
             contains(github.event.changes.title.from, '[wip]') \
           ) \
         )"
    steps:
      - uses: actions/checkout@v2
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Compute cache restore key
        # Always recompute on a push so that the maven repo doesnt grow indefinitely with old versions
        run: |
          if ${{ github.event_name == 'pull_request' }}; then echo "::set-env name=COMPUTED_RESTORE_KEY::q2maven-"; fi
      - name: Cache Maven Repository
        id: cache-maven
        uses: n1hility/cache@v2
        with:
          path: ~/.m2/repository
          # Improves the reusability of the cache to limit key changes
          key: q2maven-${{ hashFiles('bom/application/pom.xml') }}
          restore-keys: ${{ env.COMPUTED_RESTORE_KEY }}
          restore-only: ${{ github.event_name == 'pull_request' }}
      - name: Build
        run: |
          mvn -e -B -DskipTests -DskipITs -Dno-format -Ddocumentation-pdf clean install
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v1
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/io/quarkus

  linux-jvm-tests:
    name: JDK ${{matrix.java.name}} JVM Tests
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 240
    env:
      MAVEN_OPTS: -Xmx2048m
    strategy:
      fail-fast: false
      matrix:
        java :
          - {
            name: Java8,
            java-version: 8,
            maven_args: "-pl !integration-tests/gradle"
          }
          - {
            name: Java 11,
            java-version: 11,
            maven_args: "-pl !integration-tests/gradle"
          }
          - {
            name: Java 14,
            java-version: 14,
            maven_args: "-pl !integration-tests/gradle"
          }

    services:
      keycloak:
        image: quay.io/keycloak/keycloak:11.0.1
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
          JAVA_OPTS: "-server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Dkeycloak.profile.feature.upload_scripts=enabled"
        ports:
          - 127.0.0.1:8180:8080
          - 127.0.0.1:8543:8443
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 127.0.0.1:5432:5432
      mariadb:
        image: mariadb:10.4
        env:
          MYSQL_USER: hibernate_orm_test
          MYSQL_PASSWORD: hibernate_orm_test
          MYSQL_DATABASE: hibernate_orm_test
          MYSQL_ROOT_PASSWORD: secret
        ports:
          - 127.0.0.1:3308:3306
      mssql:
        image: microsoft/mssql-server-linux:2017-CU13
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ActuallyRequired11Complexity
        ports:
          - 127.0.0.1:1433:1433
      neo4j:
        image: neo4j/neo4j-experimental:4.0.0-rc01
        env:
          NEO4J_AUTH: neo4j/secret
          NEO4J_dbms_memory_pagecache_size: 10M
          NEO4J_dbms_memory_heap_initial__size: 10M
        ports:
          - 127.0.0.1:7687:7687
      amazonServices:
        image: localstack/localstack:0.11.1
        env:
          SERVICES: s3,dynamodb,sns,sqs,kms,ses
          START_WEB: 0
        ports:
          - 127.0.0.1:8000:4569
          - 127.0.0.1:8008:4572
          - 127.0.0.1:8009:4575
          - 127.0.0.1:8010:4576
          - 127.0.0.1:8011:4599
          - 127.0.0.1:8012:4566
      redis:
        image: redis:5.0.8-alpine
        ports:
          - 127.0.0.1:6379:6379
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
        env:
          discovery.type: single-node
        ports:
          - 127.0.0.1:9200:9200
    steps:
      - name: Start mysql
        shell: bash
        run: |
          netstat -ln
          sudo service mysql stop || true
          docker run --rm --publish 127.0.0.1:3306:3306 --name build-mysql -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true -e MYSQL_DATABASE=hibernate_orm_test -d mysql:8.0.21 --skip-ssl
      - name: Start DB2
        # Cannot run as a service becuase the service schema does not support --privileged mode
        shell: bash
        run: |
          docker run --rm --publish 50000:50000 --name build-db2 --privileged=true \
            -e DB2INSTANCE=hreact -e DB2INST1_PASSWORD=hreact -e DBNAME=hreact -e LICENSE=accept -e AUTOCONFIG=false -e ARCHIVE_LOGS=false \
            -d ibmcom/db2:11.5.0.0a

      - uses: actions/checkout@v2

      - name: apt clean
        shell: bash
        run: sudo apt-get clean

      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh

      - name: Set up JDK ${{ matrix.java.name }}
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@68381f2c0646f942f70b69f8e81fe10e1ed5d293
        with:
          java-version: ${{ matrix.java.java-version }}
          release: ${{ matrix.java.release }}

      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      # - name: Build with Maven
      #   run: eval mvn $JVM_TEST_MAVEN_OPTS install ${{ matrix.java.maven_args}} -pl !integration-tests/kubernetes/maven-invoker-way -pl !integration-tests/kubernetes/quarkus-standard-way
      # - name: Kube tests
      #   run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kubernetes/quarkus-standard-way integration-tests/kubernetes/maven-invoker-way
      - name: amazon-lambda tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/amazon-lambda
      - name: amazon-lambda-http tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/amazon-lambda-http
      - name: amazon-lambda-http-resteasy tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/amazon-lambda-http-resteasy
      - name: amazon-lambda-stream-handler tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/amazon-lambda-stream-handler
      - name: amazon-services tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/amazon-services
      - name: artemis-core tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/artemis-core
      - name: artemis-jms tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/artemis-jms
      - name: bootstrap-config tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/bootstrap-config
      - name: bootstrap-config/application tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/bootstrap-config/application
      - name: bootstrap-config/extension tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/bootstrap-config/extension
      - name: bootstrap-config/extension/deployment tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/bootstrap-config/extension/deployment
      - name: bootstrap-config/extension/runtime tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/bootstrap-config/extension/runtime
      - name: cache tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/cache
      - name: class-transformer tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/class-transformer
      - name: class-transformer/deployment tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/class-transformer/deployment
      - name: class-transformer/runtime tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/class-transformer/runtime
      - name: common-jpa-entities tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/common-jpa-entities
      - name: consul-config tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/consul-config
      - name: container-image tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/container-image
      - name: container-image/maven-invoker-way tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/container-image/maven-invoker-way
      - name: container-image/quarkus-standard-way tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/container-image/quarkus-standard-way
      - name: devmode tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/devmode
      - name: devtools tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/devtools
      - name: elasticsearch-rest-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elasticsearch-rest-client
      - name: elasticsearch-rest-high-level-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elasticsearch-rest-high-level-client
      - name: elytron-resteasy tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-resteasy
      - name: elytron-security tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-security
      - name: elytron-security-jdbc tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-security-jdbc
      - name: elytron-security-ldap tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-security-ldap
      - name: elytron-security-oauth2 tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-security-oauth2
      - name: elytron-undertow tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/elytron-undertow
      - name: flyway tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/flyway
      - name: funqy-amazon-lambda tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/funqy-amazon-lambda
      - name: funqy-google-cloud-functions tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/funqy-google-cloud-functions
      - name: google-cloud-functions tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/google-cloud-functions
      - name: google-cloud-functions-http tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/google-cloud-functions-http
      - name: gradle tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/gradle
      - name: grpc-health tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-health
      - name: grpc-interceptors tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-interceptors
      - name: grpc-mutual-auth tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-mutual-auth
      - name: grpc-plain-text tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-plain-text
      - name: grpc-proto-v2 tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-proto-v2
      - name: grpc-streaming tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-streaming
      - name: grpc-tls tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/grpc-tls
      - name: hibernate-orm-envers tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-orm-envers
      - name: hibernate-orm-panache tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-orm-panache
      - name: hibernate-orm-panache-kotlin tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-orm-panache-kotlin
      - name: hibernate-orm-rest-data-panache tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-orm-rest-data-panache
      - name: hibernate-reactive-db2 tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-reactive-db2
      - name: hibernate-reactive-mysql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-reactive-mysql
      - name: hibernate-reactive-postgresql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-reactive-postgresql
      - name: hibernate-search-elasticsearch tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-search-elasticsearch
      - name: hibernate-tenancy tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-tenancy
      - name: hibernate-validator tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/hibernate-validator
      - name: ide-launcher tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/ide-launcher
      # - name: infinispan-cache-jpa tests
      #   run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/infinispan-cache-jpa
      - name: infinispan-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/infinispan-client
      - name: injectmock tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/injectmock
      - name: jackson tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jackson
      - name: jgit tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jgit
      - name: jpa tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa
      - name: jpa-db2 tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-db2
      - name: jpa-derby tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-derby
      - name: jpa-h2 tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-h2
      - name: jpa-mariadb tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-mariadb
      - name: jpa-mssql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-mssql
      - name: jpa-mysql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-mysql
      - name: jpa-postgresql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-postgresql
      - name: jpa-without-entity tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jpa-without-entity
      - name: jsch tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jsch
      - name: jsonb tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/jsonb
      - name: kafka tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kafka
      - name: kafka-avro tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kafka-avro
      - name: kafka-streams tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kafka-streams
      - name: keycloak-authorization tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/keycloak-authorization
      - name: kotlin tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kotlin
      - name: kubernetes tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kubernetes
      - name: kubernetes-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kubernetes-client
      - name: kubernetes/maven-invoker-way tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kubernetes/maven-invoker-way
      - name: kubernetes/quarkus-standard-way tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/kubernetes/quarkus-standard-way
      - name: liquibase tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/liquibase
      - name: logging-gelf tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/logging-gelf
      - name: main tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/main
      - name: maven tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/maven
      - name: mongodb-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/mongodb-client
      - name: mongodb-panache tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/mongodb-panache
      - name: mongodb-panache-kotlin tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/mongodb-panache-kotlin
      - name: narayana-jta tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/narayana-jta
      - name: narayana-stm tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/narayana-stm
      - name: neo4j tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/neo4j
      - name: oidc tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/oidc
      - name: oidc-code-flow tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/oidc-code-flow
      - name: oidc-tenancy tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/oidc-tenancy
      - name: packaging tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/packaging
      - name: picocli tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/picocli
      - name: picocli-native tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/picocli-native
      - name: quartz tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/quartz
      - name: qute tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/qute
      - name: reactive-db2-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/reactive-db2-client
      - name: reactive-messaging-amqp tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/reactive-messaging-amqp
      - name: reactive-mysql-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/reactive-mysql-client
      - name: reactive-pg-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/reactive-pg-client
      - name: redis-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/redis-client
      - name: rest-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/rest-client
      - name: resteasy-jackson tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/resteasy-jackson
      - name: resteasy-mutiny tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/resteasy-mutiny
      - name: scala tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/scala
      - name: shared-library tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/shared-library
      - name: smallrye-context-propagation tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/smallrye-context-propagation
      - name: smallrye-graphql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/smallrye-graphql
      - name: spring-boot-properties tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/spring-boot-properties
      - name: spring-cloud-config-client tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/spring-cloud-config-client
      - name: spring-data-jpa tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/spring-data-jpa
      - name: spring-di tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/spring-di
      - name: spring-web tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/spring-web
      - name: test-extension tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/test-extension
      - name: tika tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/tika
      - name: vault tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vault
      - name: vault-agroal tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vault-agroal
      - name: vault-app tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vault-app
      - name: vertx tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vertx
      - name: vertx-graphql tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vertx-graphql
      - name: vertx-http tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vertx-http
      - name: vertx-web tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/vertx-web
      - name: virtual-http tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/virtual-http
      - name: virtual-http-resteasy tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/virtual-http-resteasy
      - name: webjars-locator tests
        run: eval mvn $JVM_TEST_MAVEN_OPTS install -pl integration-tests/webjars-locator
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-linux-jvm${{matrix.java.name}}
          path: 'test-reports.tgz'

  linux-jvm-gradle-tests:
    name: Gradle Tests JDK ${{matrix.java.name}}
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        java:
         - {
            name: Java 11,
            java-version: 11
          }
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          GRADLE_OPTS: -Xmx1408m
        with:
          gradle-version: wrapper
          wrapper-directory: integration-tests/gradle
          build-root-directory: integration-tests/gradle
          arguments: clean test -i -S --stacktrace --no-daemon

  windows-jdk11-jvm-tests:
    name: Windows JDK 11 JVM Tests
    needs: build-jdk11
    runs-on: windows-latest
    timeout-minutes: 180
    env:
      MAVEN_OPTS: -Xmx1408m

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        shell: bash
        run: mvn -B --settings .github/mvn-settings.xml -Dno-native -Dformat.skip -pl !integration-tests/gradle install
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-windows-jdk11-jvm
          path: 'test-reports.tgz'

  windows-jdk11-jvm-gradle-tests:
    name: Gradle Tests Windows JDK 11
    needs: build-jdk11
    runs-on: windows-latest
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Gradle
        uses: eskatos/gradle-command-action@v1
        timeout-minutes: 60
        env:
          GRADLE_OPTS: -Xmx1408m
        with:
          gradle-version: wrapper
          wrapper-directory: integration-tests/gradle
          build-root-directory: integration-tests/gradle
          arguments: clean test -i -S --stacktrace --no-daemon

  tcks-test:
    name: MicroProfile TCKs Tests
    needs: build-jdk11
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v2
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: mvn -B --settings .github/mvn-settings.xml -Dno-native -Dno-format -DskipTests -Dtcks install
      - name: Verify with Maven
        run: mvn -B --settings .github/mvn-settings.xml -f tcks/pom.xml verify
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-tcks
          path: 'test-reports.tgz'

  native-tests:
    name: Native Tests - ${{matrix.category}}
    needs: build-jdk11
    runs-on: ubuntu-latest
    # Ignore the following YAML Schema error
    timeout-minutes: ${{matrix.timeout}}
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        category: [Main, Data1, Data2, Data3, Data4, Data5, Data6, Security1, Security2, Security3, Amazon, Messaging, Cache, HTTP, Misc1, Misc2, Misc3, Misc4, Spring, gRPC]
        include:
          - category: Main
            postgres: "true"
            timeout: 40
            test-modules: main
          - category: Data1
            mariadb: "true"
            mssql: "true"
            timeout: 65
            test-modules: >
              jpa-h2
              jpa-mariadb
              jpa-mssql
              jpa-derby
              jpa-without-entity
              hibernate-tenancy
          - category: Data2
            db2: "true"
            mysql: "true"
            mariadb: "true"
            timeout: 65
            test-modules: >
              jpa
              jpa-mysql
              jpa-db2
              reactive-mysql-client
              reactive-db2-client
              hibernate-reactive-db2
              hibernate-reactive-mysql
          - category: Data3
            postgres: "true"
            timeout: 70
            test-modules: >
              flyway
              hibernate-orm-panache
              hibernate-orm-panache-kotlin
              hibernate-orm-envers
              liquibase
          - category: Data4
            neo4j: "true"
            redis: "true"
            timeout: 55
            test-modules: >
              mongodb-client
              mongodb-panache
              redis-client
              neo4j
              hibernate-orm-rest-data-panache
          - category: Data5
            postgres: "true"
            timeout: 65
            test-modules: >
              jpa-postgresql
              narayana-stm
              narayana-jta
              reactive-pg-client
              hibernate-reactive-postgresql
          - category: Data6
            postgres: "true"
            elasticsearch: "true"
            timeout: 40
            test-modules: >
              elasticsearch-rest-client
              elasticsearch-rest-high-level-client
              hibernate-search-elasticsearch
          - category: Amazon
            amazonServices: "true"
            timeout: 45
            test-modules: >
              amazon-services
              amazon-lambda
              amazon-lambda-http
          - category: Messaging
            timeout: 75
            test-modules: >
              artemis-core
              artemis-jms
              kafka
              kafka-streams
              reactive-messaging-amqp
          - category: Security1
            timeout: 50
            keycloak: "true"
            test-modules: >
              elytron-security-oauth2
              elytron-security
              elytron-security-jdbc
              elytron-undertow
              elytron-security-ldap
          - category: Security2
            timeout: 70
            keycloak: "true"
            test-modules: >
              elytron-resteasy
              oidc
              oidc-code-flow
              oidc-tenancy
              keycloak-authorization
          - category: Security3
            timeout: 50
            test-modules: >
              vault
              vault-app
              vault-agroal
          - category: Cache
            timeout: 55
            test-modules: >
              infinispan-cache-jpa
              infinispan-client
              cache
          - category: HTTP
            timeout: 60
            test-modules: >
              resteasy-jackson
              resteasy-mutiny
              vertx
              vertx-http
              vertx-web
              vertx-graphql
              virtual-http
              rest-client
          - category: Misc1
            timeout: 60
            test-modules: >
              maven
              jackson
              jsonb
              jsch
              jgit
              quartz
              qute
              consul-config
          - category: Misc2
            timeout: 55
            test-modules: >
              tika
              hibernate-validator
              test-extension
              logging-gelf
              bootstrap-config
          # kubernetes-client alone takes 30mn+
          - category: Misc3
            timeout: 60
            test-modules: >
              kubernetes-client
          - category: Misc4
            timeout: 30
            test-modules: >
              smallrye-graphql
              picocli-native
              gradle
          - category: Spring
            timeout: 50
            test-modules: >
              spring-di
              spring-web
              spring-data-jpa
              spring-boot-properties
              spring-cloud-config-client
          - category: gRPC
            timeout: 65
            test-modules: >
              grpc-health
              grpc-interceptors
              grpc-mutual-auth
              grpc-plain-text
              grpc-proto-v2
              grpc-streaming
              grpc-tls
    steps:
      # These should be services, but services do not (yet) allow conditional execution
      - name: Postgres Service
        run: |
          docker run --rm --publish 5432:5432 --name build-postgres \
          -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PASSWORD -e POSTGRES_DB=$DB_NAME \
          -d postgres:10.5
        if: matrix.postgres
      - name: MySQL Service
        run: |
          sudo service mysql stop || true
          docker run --rm --publish 3306:3306 --name build-mysql  \
            -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true \
            -d mysql:5 --skip-ssl
        if: matrix.mysql
      - name: DB2 Service
        run: |
          docker run --rm --publish 50000:50000 --name build-db2 --privileged=true \
            -e DB2INSTANCE=hreact -e DB2INST1_PASSWORD=hreact -e DBNAME=hreact -e LICENSE=accept -e AUTOCONFIG=false -e ARCHIVE_LOGS=false \
            -d ibmcom/db2:11.5.0.0a
        if: matrix.db2
      - name: Maria DB Service
        run: |
          docker run --rm --publish 3308:3306 --name build-mariadb \
            -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_ROOT_PASSWORD=secret \
            -d mariadb:10.4
        if: matrix.mariadb
      - name: MS-SQL Service
        run: |
          docker run --rm --publish 1433:1433 --name build-mssql \
            -e ACCEPT_EULA=Y -e SA_PASSWORD=ActuallyRequired11Complexity \
            -d microsoft/mssql-server-linux:2017-CU13
        if: matrix.mssql
      - name: Amazon Services
        run: |
          docker run --rm --publish 8000:4569 --publish 8008:4572 --publish 8009:4575 --publish 8010:4576 --publish 8011:4599 --publish 8012:4566 --name build-amazon-service-clients -e SERVICES=s3,dynamodb,sns,sqs,kms,ses -e START_WEB=0 \
            -d localstack/localstack:0.11.1
        if: matrix.amazonServices
      - name: Neo4j Service
        run: |
          docker run --rm --publish 7687:7687 --name build-neo4j \
            -e NEO4J_AUTH=neo4j/secret -e NEO4J_dbms_memory_pagecache_size=10M -e NEO4J_dbms_memory_heap_initial__size=10M \
            -d neo4j/neo4j-experimental:4.0.0-rc01
        if: matrix.neo4j
      - name: Redis Service
        run: docker run --rm --publish 6379:6379 --name build-redis -d redis:5.0.8-alpine
        if: matrix.redis
      - name: Keycloak Service
        run: |
          docker run --rm --publish 8180:8080 --publish 8543:8443 --name build-keycloak \
            -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -e JAVA_OPTS=" \
              -server -Xms64m -Xmx512m -XX:MetaspaceSize=96M \
              -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true \
              -Dkeycloak.profile.feature.upload_scripts=enabled" \
            -d quay.io/keycloak/keycloak:11.0.1
        if: matrix.keycloak
      - name: Elasticsearch Service
        run: |
          docker run --rm --publish 9200:9200 --name build-elasticsearch \
          -e discovery.type=single-node \
          -d docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
        if: matrix.elasticsearch
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@b9cc6eabf7e7e3889766b5cee486f874c9e1bd2d
        with:
          java-version: 11
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        env:
          TEST_MODULES: ${{matrix.test-modules}}
          CATEGORY: ${{matrix.category}}
        run: |
          for i in $TEST_MODULES
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
          # add the 'simple with spaces' project to the run of 'Misc1' by executing it explicitly
          # done because there is no good way to pass strings with empty values to the previous command
          # so this hack is as good as any
          if [ "$CATEGORY" == "Misc1" ]; then
            mvn -Dnative -Dquarkus.native.container-build=true -B --settings .github/mvn-settings.xml -f 'integration-tests/simple with space/' verify
          fi
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -type d -name '*-reports' -o -wholename '*/build/reports/tests/functionalTest' | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports-native-${{matrix.category}}
          path: 'test-reports.tgz'
